{"1.3.0-rc2",
 [{"1.2.7",
   [{add_module,'Elixir.Archethic.Contracts.ContractConditions.Subjects'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.FunctionInterpreter'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.FunctionKeys'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Code'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Contract'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Http'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.HttpImpl'},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Error'},
    {add_module,'Elixir.Archethic.Tag'},
    {add_module,'Elixir.Archethic.TransactionChain.TransactionData.Recipient'},
    {add_module,'Elixir.ArchethicWeb.API.FunctionCallPayload'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPC.Error'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.AddOriginKey'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.CallContractFunction'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.EstimateTransactionFee'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.SendTransaction'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.SimulateContractExecution'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPC.Method'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPC.TransactionSchema'},
    {add_module,'Elixir.ArchethicWeb.API.JsonRPCController'},
    {add_module,'Elixir.ArchethicWeb.API.OriginPublicKeyPayload'},
    {add_module,'Elixir.ArchethicWeb.API.REST.OriginKeyController'},
    {add_module,'Elixir.ArchethicWeb.API.REST.TransactionController'},
    {add_module,'Elixir.ArchethicWeb.API.Types.RecipientList'},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.ContractConditions',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Chain',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Json',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.List',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Map',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Regex',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.String',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.TokenImpl',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Scope',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Crypto.ID',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.Constraints',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.ETSFlush',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Listener',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionData',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicCache.LRU',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.Compiled',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.Schema.Ownership',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.Schema.TransactionData',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.APIRouter.Helpers',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.APIRouter',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.Explorer.ExplorerLive.TopTransactionsCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.Explorer.TransactionCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.ArchethicWeb.WebUtils',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Contracts.ContractConstants',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.CommonInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Library']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.TransactionStatements',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Crypto',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Time',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Scope']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Mining.SmartContractValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election']},
    {update,'Elixir.Archethic.OracleChain.Services.HydratingCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Contract.Context',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Contract',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ConditionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.CommonInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Library']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.ActionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto.ID',
             'Elixir.Archethic.Utils.PortHandler']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl.Encoding',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ConditionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Scope']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.ConditionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter']},
    {load_module,'Elixir.Archethic.Crypto',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto.ID',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.TransactionType',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction']},
    {update,'Elixir.ArchethicWeb.Explorer.FaucetRateLimiter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Election']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.API.TransactionPayload',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.NetworkView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.ContractConditions',
             'Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.TransactionData',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
                  'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
                  'Elixir.Archethic.TransactionChain.MemTablesLoader',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Mining','Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Crypto.ID',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.Fee',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionData']},
    {load_module,'Elixir.Archethic.Mining.ProofOfWork',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.OracleChain.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger',
             'Elixir.Archethic.Crypto','Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter.CommonInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Library',
                  'Elixir.Archethic.Contracts.Interpreter.Scope']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.ChainImpl',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
             'Elixir.Archethic.DB.EmbeddedImpl.Encoding',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.ActionInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.ConditionInterpreter']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.ArchethicCache.LRU']},
    {load_module,'Elixir.Archethic.Election',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Election.Constraints',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Governance',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.Explorer.ExplorerView',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils','Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateSmartContractCall',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Election','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining',
                  'Elixir.Archethic.SelfRepair.NetworkView',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Election','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.NetworkInit',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining','Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.ConditionInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.ConditionValidator',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Loader',
                  'Elixir.Archethic.Contracts.TransactionLookup',
                  'Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Election','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.ContractConstants',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.Mining.Fee',
                  'Elixir.Archethic.Mining.ProofOfWork',
                  'Elixir.Archethic.Mining.SmartContractValidation',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.Mining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining.DistributedWorkflow',
                  'Elixir.Archethic.Mining.Fee',
                  'Elixir.Archethic.Mining.PendingTransactionValidation',
                  'Elixir.Archethic.Mining.StandaloneWorkflow']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Replication',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.PendingTransactionValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Election','Elixir.Archethic.Governance',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionData',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Replication.TransactionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.Governance',
                  'Elixir.Archethic.Replication.TransactionPool',
                  'Elixir.Archethic.Replication.TransactionValidator',
                  'Elixir.Archethic.SelfRepair.NetworkView',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Contract'},
    {delete_module,'Elixir.ArchethicWeb.API.OriginKeyController'},
    {delete_module,'Elixir.ArchethicWeb.API.Schema.OriginPublicKey'},
    {delete_module,'Elixir.ArchethicWeb.API.TransactionController'},
    {delete_module,'Elixir.ArchethicWeb.API.Types.AddressList'},
    {apply,{supervisor,terminate_child,
                       ['Elixir.Archethic.Telemetry',prometheus_metrics]}},
    {apply,{supervisor,restart_child,
                       ['Elixir.Archethic.Telemetry',prometheus_metrics]}},
    {apply,{'Elixir.Mix.Tasks.Archethic.Migrate',run,["1.3.0-rc2",true]}}]}],
 [{"1.2.7",
   [{delete_module,'Elixir.Archethic.Contracts.ContractConditions.Subjects'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.FunctionInterpreter'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.FunctionKeys'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Code'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Contract'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Http'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.HttpImpl'},
    {delete_module,'Elixir.Archethic.Contracts.Interpreter.Library.Error'},
    {delete_module,'Elixir.Archethic.Tag'},
    {delete_module,'Elixir.Archethic.TransactionChain.TransactionData.Recipient'},
    {delete_module,'Elixir.ArchethicWeb.API.FunctionCallPayload'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPC.Error'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.AddOriginKey'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.CallContractFunction'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.EstimateTransactionFee'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.SendTransaction'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPC.Method.SimulateContractExecution'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPC.Method'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPC.TransactionSchema'},
    {delete_module,'Elixir.ArchethicWeb.API.JsonRPCController'},
    {delete_module,'Elixir.ArchethicWeb.API.OriginPublicKeyPayload'},
    {delete_module,'Elixir.ArchethicWeb.API.REST.OriginKeyController'},
    {delete_module,'Elixir.ArchethicWeb.API.REST.TransactionController'},
    {delete_module,'Elixir.ArchethicWeb.API.Types.RecipientList'},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.ContractConditions',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Chain',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Json',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.List',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Map',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Regex',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.String',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.TokenImpl',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Scope',brutal_purge,
                 soft_purge,[]},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Crypto.ID',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.Constraints',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.ETSFlush',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Listener',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.TransactionChain.TransactionData',
                 brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicCache.LRU',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.Compiled',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.Schema.Ownership',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.Schema.TransactionData',
                 brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.APIRouter.Helpers',brutal_purge,
                 soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.APIRouter',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.Explorer.ExplorerLive.TopTransactionsCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.Explorer.TransactionCache',
            {advanced,[]},
            brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.ArchethicWeb.WebUtils',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Contracts.ContractConstants',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.CommonInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Library']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.TransactionStatements',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Crypto',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.Time',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Scope']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Mining.SmartContractValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election']},
    {update,'Elixir.Archethic.OracleChain.Services.HydratingCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Contract.Context',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Contract',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ConditionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.CommonInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Library']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.ActionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto.ID',
             'Elixir.Archethic.Utils.PortHandler']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl.Encoding',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ConditionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Scope']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy.ConditionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter']},
    {load_module,'Elixir.Archethic.Crypto',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto.ID',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.ArchethicWeb.API.GraphQL.Schema.TransactionType',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain.Transaction']},
    {update,'Elixir.ArchethicWeb.Explorer.FaucetRateLimiter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Election']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.API.TransactionPayload',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.NetworkView',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.ContractConditions',
             'Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain.Transaction',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.TransactionData',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
                  'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
                  'Elixir.Archethic.TransactionChain.MemTablesLoader',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Mining','Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Crypto.ID',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.Fee',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionData']},
    {load_module,'Elixir.Archethic.Mining.ProofOfWork',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.OracleChain.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger',
             'Elixir.Archethic.Crypto','Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter.CommonInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Library',
                  'Elixir.Archethic.Contracts.Interpreter.Scope']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library.Common.ChainImpl',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.UtilsInterpreter',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
             'Elixir.Archethic.DB.EmbeddedImpl.Encoding',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Legacy',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.ActionInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy.ConditionInterpreter']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.ArchethicCache.LRU']},
    {load_module,'Elixir.Archethic.Election',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Election.Constraints',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Governance',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.Explorer.ExplorerView',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils','Elixir.ArchethicWeb.WebUtils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateSmartContractCall',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Election','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining',
                  'Elixir.Archethic.SelfRepair.NetworkView',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Election','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.StatsCollector',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Bootstrap.NetworkInit',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining','Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter.ActionInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.ConditionInterpreter',
                  'Elixir.Archethic.Contracts.Interpreter.ConditionValidator',
                  'Elixir.Archethic.Contracts.Interpreter.Legacy',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Contracts.ContractConstants',
                  'Elixir.Archethic.Contracts.Interpreter',
                  'Elixir.Archethic.Contracts.Loader',
                  'Elixir.Archethic.Contracts.TransactionLookup',
                  'Elixir.Archethic.Election',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Election','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.Contract',
             'Elixir.Archethic.Contracts.ContractConstants',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Mining.ValidationContext',brutal_purge,
                 soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.Mining.Fee',
                  'Elixir.Archethic.Mining.ProofOfWork',
                  'Elixir.Archethic.Mining.SmartContractValidation',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction']},
    {load_module,'Elixir.Archethic.Mining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.Mining.DistributedWorkflow',
                  'Elixir.Archethic.Mining.Fee',
                  'Elixir.Archethic.Mining.PendingTransactionValidation',
                  'Elixir.Archethic.Mining.StandaloneWorkflow']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.Replication',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Mining.PendingTransactionValidation',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.Election','Elixir.Archethic.Governance',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.TransactionData',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},
            brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Election',
             'Elixir.Archethic.Mining.PendingTransactionValidation',
             'Elixir.Archethic.Mining.ValidationContext',
             'Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.TransactionChain.Transaction',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Replication.TransactionValidator',
                 brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Contracts.Contract',
                  'Elixir.Archethic.Election','Elixir.Archethic.Mining',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.TransactionChain.Transaction.ValidationStamp.LedgerOperations']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Contracts',
                  'Elixir.Archethic.Crypto','Elixir.Archethic.Election',
                  'Elixir.Archethic.Governance',
                  'Elixir.Archethic.Replication.TransactionPool',
                  'Elixir.Archethic.Replication.TransactionValidator',
                  'Elixir.Archethic.SelfRepair.NetworkView',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.TransactionChain.Transaction',
                  'Elixir.Archethic.Utils']},
    {add_module,'Elixir.Archethic.Contracts.Interpreter.Library.Contract'},
    {add_module,'Elixir.ArchethicWeb.API.OriginKeyController'},
    {add_module,'Elixir.ArchethicWeb.API.Schema.OriginPublicKey'},
    {add_module,'Elixir.ArchethicWeb.API.TransactionController'},
    {add_module,'Elixir.ArchethicWeb.API.Types.AddressList'}]}]}.
