import Config

# Do not print debug messages in production
config :logger, level: System.get_env("ARCHETHIC_LOGGER_LEVEL", "info") |> String.to_atom()

config :archethic, :mut_dir, System.get_env("ARCHETHIC_MUT_DIR", "~/archethic_node_mut_data")

config :archethic, ArchEthic.Bootstrap,
  reward_address: System.get_env("ARCHETHIC_REWARD_ADDRESS", "") |> Base.decode16!(case: :mixed)

config :archethic, ArchEthic.Bootstrap.Sync,
  # 15 days
  out_of_sync_date_threshold:
    System.get_env("ARCHETHIC_BOOTSTRAP_OUT_OF_SYNC_THRESHOLD", "54000") |> String.to_integer()

# TODO: provide the true addresses for the genesis UCO distribution
# config :archethic, ArchEthic.Bootstrap.NetworkInit, genesis_pools: []

config :archethic, ArchEthic.BeaconChain.SlotTimer,
  # Every 10 minutes
  interval: System.get_env("ARCHETHIC_BEACON_CHAIN_SLOT_TIMER_INTERVAL", "0 */10 * * * * *")

config :archethic, ArchEthic.BeaconChain.SummaryTimer,
  # Every day at midnight
  interval: System.get_env("ARCHETHIC_BEACON_CHAIN_SUMMARY_TIMER_INTERVAL", "0 0 0 * * * *")

config :archethic, ArchEthic.Crypto,
  root_ca_public_keys: [
    software:
      System.get_env("ARCHETHIC_CRYPTO_ROOT_CA_SOFTWARE_PUBKEY", "")
      |> Base.decode16!(case: :mixed),
    tpm: System.get_env("ARCHETHIC_CRYPTO_ROOT_CA_TPM_PUBKEY", "") |> Base.decode16!(case: :mixed)
  ],
  software_root_ca_key: [
    System.get_env("ARCHETHIC_CRYPTO_ROOT_CA_SOFTWARE_KEY", "") |> Base.decode16!(case: :mixed)
  ]

config :archethic,
       ArchEthic.Crypto.NodeKeystore,
       (case(System.get_env("ARCHETHIC_CRYPTO_NODE_KEYSTORE_IMPL", "TPM")) do
          "TPM" ->
            ArchEthic.Crypto.NodeKeystore.TPMImpl

          "SOFTWARE" ->
            ArchEthic.Crypto.NodeKeystore.SoftwareImpl
        end)

# TODO: to remove when the implementation will be detected
config :archethic,
       ArchEthic.Crypto.SharedSecretsKeystore,
       ArchEthic.Crypto.SharedSecretsKeystore.SoftwareImpl

config :archethic, ArchEthic.DB.CassandraImpl,
  host: System.get_env("ARCHETHIC_DB_HOST", "127.0.0.1:9042")

config :archethic, ArchEthic.Governance.Pools,
  # TODO: provide the true addresses of the members
  initial_members: [
    technical_council: [],
    ethical_council: [],
    foundation: [],
    archethic: []
  ]

config :archethic,
       ArchEthic.Networking.IPLookup,
       (case(System.get_env("ARCHETHIC_NETWORKING_IMPL", "NAT")) do
          "NAT" ->
            ArchEthic.Networking.IPLookup.NAT

          "STATIC" ->
            ArchEthic.Networking.IPLookup.Static

          "IPFY" ->
            ArchEthic.Networking.IPLookup.IPIFY
        end)

config :archethic, ArchEthic.Networking.IPLookup.Static,
  hostname: System.get_env("ARCHETHIC_STATIC_IP")

config :archethic, ArchEthic.OracleChain.Scheduler,
  # Poll new changes every minute
  polling_interval: System.get_env("ARCHETHIC_ORACLE_CHAIN_POLLING_INTERVAL", "0 * * * * *"),
  # Aggregate chain every day 10 minute before midnight
  summary_interval: System.get_env("ARCHETHIC_ORACLE_CHAIN_SUMMARY_INTERVAL", "0 50 0 * * * *")

config :archethic, ArchEthic.Reward.NetworkPoolScheduler,
  # Every month
  interval: System.get_env("ARCHETHIC_REWARD_SCHEDULER_INTERVAL", "0 0 0 1 * * *")

config :archethic,
       ArchEthic.Crypto.SharedSecretsKeystore,
       ArchEthic.Crypto.SharedSecretsKeystore.SoftwareImpl

config :archethic, ArchEthic.SharedSecrets.NodeRenewalScheduler,
  # Every day at 23:50:00
  interval:
    System.get_env("ARCHETHIC_SHARED_SECRETS_RENEWAL_SCHEDULER_INTERVAL", "0 50 0 * * * *"),
  # Every day at midnight
  application_interval:
    System.get_env("ARCHETHIC_SHARED_SECRETS_APPLICATION_INTERVAL", "0 0 0 * * * *")

config :archethic, ArchEthic.SelfRepair.Scheduler,
  # Every day at 00:05:00
  # To give time for the beacon chain to produce summary
  interval: System.get_env("ARCHETHIC_SELF_REPAIR_SCHEDULER_INTRERVAL", "0 5 0 * * * *")

config :archethic, ArchEthic.P2P.Endpoint,
  port: System.get_env("ARCHETHIC_P2P_PORT", "3002") |> String.to_integer()

config :archethic, ArchEthic.P2P.BootstrappingSeeds,
  backup_file: System.get_env("ARCHETHIC_P2P_BOOTSTRAPPING_SEEDS_FILE", "p2p/seeds"),
  # TODO: define the default list of P2P seeds once the network will be more open to new miners
  genesis_seeds: System.get_env("ARCHETHIC_P2P_SEEDS")

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :archethic, ArchEthicWeb.Endpoint,
  http: [:inet6, port: System.get_env("ARCHETHIC_HTTP_PORT", "8080") |> String.to_integer()],
  url: [host: "*", port: 443],
  cache_static_manifest: "priv/static/cache_manifest.json",
  server: true,
  root: ".",
  version: Application.spec(:archethic, :vsn),
  check_origin: false,
  https: [
    port: 443,
    cipher_suite: :strong,
    keyfile: System.get_env("ARCHETHIC_WEB_SSL_KEY_PATH", ""),
    certfile: System.get_env("ARCHETHIC_WEB_SSL_CERT_PATH", ""),
    transport_options: [socket_opts: [:inet6]]
  ]

# force_ssl: [hsts: true]
